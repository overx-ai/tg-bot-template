Metadata-Version: 2.4
Name: tg-bot-template
Version: 0.1.0
Summary: A modern cookiecutter template for creating production-ready Telegram bots
Author-email: Jack Ma <hustlequeen@mail.ru>
License: MIT
Project-URL: Homepage, https://github.com/hustlestar/tg-bot-template
Project-URL: Repository, https://github.com/hustlestar/tg-bot-template
Project-URL: Issues, https://github.com/hustlestar/tg-bot-template/issues
Keywords: telegram,bot,cookiecutter,template,python
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Communications :: Chat
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: cookiecutter>=2.1.0
Requires-Dist: PyNaCl==1.5.0
Requires-Dist: pyyaml>=6.0.0
Requires-Dist: requests>=2.31.0
Requires-Dist: mcp>=0.1.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Provides-Extra: bot-runtime
Requires-Dist: aiohttp>=3.9.0; extra == "bot-runtime"
Requires-Dist: alembic>=1.13.0; extra == "bot-runtime"
Requires-Dist: asyncpg>=0.30.0; extra == "bot-runtime"
Requires-Dist: click>=8.1.8; extra == "bot-runtime"
Requires-Dist: psycopg2-binary>=2.9.0; extra == "bot-runtime"
Requires-Dist: python-dotenv>=1.1.0; extra == "bot-runtime"
Requires-Dist: python-telegram-bot>=22.0; extra == "bot-runtime"
Requires-Dist: pyyaml>=6.0.0; extra == "bot-runtime"
Requires-Dist: sqlalchemy>=2.0.0; extra == "bot-runtime"
Requires-Dist: openai>=1.75.0; extra == "bot-runtime"

# 🤖 Telegram Bot Cookiecutter Template

A modern, production-ready cookiecutter template for creating Telegram bots in Python. Get your bot running in minutes with built-in CI/CD, database migrations, and multi-language support.

## 🚀 Quick Start

### Option 1: Simple Creation (Just provide name!)
```bash
python create_bot.py "My Bot Name"
```

### Option 2: Traditional Cookiecutter
```bash
cookiecutter https://github.com/hustlestar/tg-bot-template.git
```

### Option 3: With Presets
```bash
python bot_factory.py "My AI Bot" --preset ai
```

That's it! Your bot is created. See [PROJECT_CREATION_GUIDE.md](PROJECT_CREATION_GUIDE.md) for all creation methods and [QUICKSTART.md](QUICKSTART.md) for detailed setup.

## ✨ Features

### Core Features
- **🌐 Multi-language Support** - Built-in localization system
- **⌨️ Dynamic Keyboards** - Inline keyboard management
- **💾 PostgreSQL + Migrations** - Alembic for schema management
- **🔄 Auto-migrations** - Database updates on startup
- **📝 Clean Architecture** - Organized src/ layout

### Optional Features (configured during generation)
- **🤖 AI Integration** - OpenRouter support for GPT/Claude
- **🆘 Support System** - Built-in support bot functionality
- **🐳 Docker Support** - Docker & docker-compose files
- **🚀 GitHub Actions** - Automated CI/CD pipeline

### DevOps & Deployment
- **⚙️ Systemd Service** - Production deployment scripts
- **🔐 Organization Secrets** - GitHub secrets management
- **📊 Automated Testing** - pytest with async support
- **🎯 Type Checking** - mypy configuration

## 📋 Template Options

When you run `cookiecutter`, you'll be asked:

| Variable | Description | Default |
|----------|-------------|---------|
| `project_name` | Your bot's display name | My Telegram Bot |
| `project_slug` | Directory/package name | my-telegram-bot |
| `bot_username` | Telegram @username | my_telegram_bot |
| `use_openrouter` | Enable AI features? | y |
| `use_support_bot` | Enable support system? | n |
| `use_github_actions` | Include CI/CD? | y |
| `use_docker` | Include Docker files? | y |
| `python_version` | Python version | 3.11 |

## 🏗️ Generated Project Structure

```
your-bot-name/
├── src/                    # Clean Python package
│   ├── main.py            # Entry point
│   ├── cli.py             # CLI commands
│   ├── config/            # Settings management
│   ├── core/              # Bot core functionality
│   ├── handlers/          # Command handlers
│   ├── models/            # Database models
│   └── utils/             # Helpers
├── tests/                 # Test suite
├── deployment/            # Deployment scripts
│   ├── setup.sh          # First-time setup
│   ├── deploy.sh         # Quick updates
│   └── *.service         # Systemd service
├── .github/workflows/     # CI/CD pipelines
├── locales/              # Translation files
├── migrations/           # Database migrations
├── requirements.txt      # Dependencies
├── .env.example         # Environment template
└── docker-compose.yml   # Docker setup
```

## 🔧 Prerequisites

- Python 3.10+
- PostgreSQL
- Telegram Bot Token from [@BotFather](https://t.me/botfather)
- (Optional) OpenRouter API key for AI features

## 🚀 Deployment

### GitHub Actions (Recommended)

1. Set up organization secrets:
   ```bash
   cp secrets.example.yaml secrets.yaml
   # Edit secrets.yaml with your values
   python scripts/setup_secrets.py
   ```
   See [SECRETS_SETUP.md](SECRETS_SETUP.md) for details.
2. Push to GitHub
3. Automatic deployment on push to main!

### Manual Deployment

```bash
# On your server
git clone your-repo
cd your-bot
./deployment/setup.sh  # First time
./deployment/deploy.sh # Updates
```

## 🛠️ Development

### Testing the Template

```bash
# Clone this template
git clone https://github.com/hustlestar/tg-bot-template.git
cd tg-bot-template

# Install dependencies
pip install -r requirements.txt

# Run template tests
pytest tests/test_cookiecutter_template.py
```

### Contributing

1. Fork the repository
2. Create your feature branch
3. Make your changes
4. Run tests
5. Submit a pull request

## 📚 Documentation

- [QUICKSTART.md](QUICKSTART.md) - Get started in 5 minutes
- [PROJECT_CREATION_GUIDE.md](PROJECT_CREATION_GUIDE.md) - All ways to create projects
- [SECRETS_SETUP.md](SECRETS_SETUP.md) - Organization secrets setup
- [SECRETS_ARCHITECTURE.md](SECRETS_ARCHITECTURE.md) - How secrets system works

## 🤝 Support

- Create an issue for bugs/features
- Check existing issues before posting
- PRs welcome!

## 📄 License

MIT License - see LICENSE file

---

Built with ❤️ for rapid Telegram bot development
